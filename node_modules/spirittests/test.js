'use strict';

let spirittests = require('./spirittest.class.js');
describe('SpiritTest class', () => {
    let fs, spyObj;
    var createdTestRan = false;
    fs = require('fs');

    global.called = () => {
        createdTestRan = true;
    };

    spirittests.createTest(function() {
        describe('A spec', () => {
            it('Should do something', () => {
                global.called();
            });
        });
    });

    beforeEach(() => {
        spyObj = {
            'testFn': () => {
            }
        };
        spyOn(spyObj, 'testFn');
        spirittests.readTests();
    });

    it('Should read in test files', () => {
        expect(spirittests.testFiles.length).toBe(1);
    });
    
    spirittests.includeTests();

    it('Should have run the included tests', () => {
        expect(createdTestRan).toBe(true);
    });

    it('Should allow files and configs to be created, and easily cleaned up.', 
        () => {
            spirittests.createFile('a.json', 'contents');
            expect(fs.existsSync('a.json')).toBe(true);
            expect(fs.readFileSync('a.json', 'UTF8')).toBe('contents');
            spirittests.cleanup();
            expect(fs.existsSync('a.json')).toBe(false);
        });
    
    it('Should allow a web server to be run.', function(done) {
        spirittests.testServer.createServer().then((port) => {
            spirittests.request('http://127.0.0.1:' + port, function(err, res, body) {
                expect(err).toBe(null);
                done();
            });
        });
    });

    it('Should allow a web server to be run, and availability to be tested ' +
        'via ping.', () => {
            
        });

    it('Should allow a web server to be run, and endpoints to be tested for ' +
        'a result.', function(done) {
            // test first for output
            // test next for POST/PUT/DELETE
            // test next for using GET args
            // test finally for a POST with args
            spirittests.testServer.app.all('/test', function(req, res, next) {
                if (req.query.foo) {
                    res.send('bar');
                } else {
                    res.send('success');
                }
            });
            spirittests.testServer.createServer().then((port) => {
                spirittests.testEndpoint({
                    host: 'http://localhost:' + port + '/test',
                }, 'success').then(() => {
                    done();
                });
            });
        });

    it('Should allow a test that throws an error', function() {
        expect(function() {
            throw new Error('message');
        }).toThrow(new Error('message'));
    });

    it('Should capture suite and spec information.', () => {
    });

    it('Should capture pass/fail information.', () => {
    });

    it('Should emit an event when a test passes or fails.', () => {
    });

    it('Should install the testServer target to the current process.', () => {
    });

    it('Should allow additional test folders to be configured via a config.',
        ()=> {
            
        });

    afterEach((done) => {
        process.emit('SpiritFiles Cleanup');
        spirittests.testServer.shutdownServers().then(() => {
            done();
        });
    });
});