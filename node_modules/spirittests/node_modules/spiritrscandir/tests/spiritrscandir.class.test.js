"use strict";

describe('SpiritRScandir Class', function() {
    let cwd;
    let fs;
    let helpers;
    let rimraf;
    let rscandir;
    let rscandirHelpers;

    beforeEach(function() {
        cwd = process.cwd();
        process.chdir(__dirname + '/../');
        fs = require('fs');
        helpers = require('./test.helpers.js');
        rimraf = require('rimraf');
        rscandir = require(process.cwd() + '/index.js');
        rscandirHelpers = new (require(process.cwd() + '/spiritrscandir.class.js')
            .SpiritRScandir);
        helpers.createFiles();
        process.chdir(__dirname + '/../');
    });

    it('Should scan all spiritrscandirFiles in a directory.', () => {
        expect(rscandir('spiritrscandirFiles').length).toBe(3);
        for (let file of rscandir('spiritrscandirFiles')) {
            expect(fs.existsSync(file)).toBe(true);
        }
    });

    it('Should scan all spiritrscandirFiles of a subdirectory.', () => {
        expect(rscandir('node_modules/spiritrscandirFilesTestModule').length)
            .toBe(6);
        for (let file of
            rscandir('node_modules/spiritrscandirFilesTestModule')) {
            expect(fs.existsSync(file)).toBe(true);
        }
    });

    it('Should scan all spiritrscandirFiles of a subdirectory using a custom' +
        ' sort strategy.', () => {
        let sorts = require(process.cwd() + '/spiritrscandir.class.js')
            .SpiritRScandirSortStrategy;
        rscandirHelpers.setSort(sorts.DEPTH_FIRST);
        expect(rscandir('node_modules/spiritrscandirFilesTestModule').length)
            .toBe(6);
        for (let file of
            rscandir('node_modules/spiritrscandirFilesTestModule')) {
            expect(fs.existsSync(file)).toBe(true);
        }
    });

    it('Should cache directories queried through rscandir.', (done) => {
        expect(fs.existsSync('cache/spiritrscandir.json')).toBe(false);
        rscandir('spiritrscandirFiles');
        setTimeout(() => {
            expect(fs.existsSync('cache/spiritrscandir.json')).toBe(true);
            done();
        }, 100);
    });

    it('Should allow a batchRead of previously scanned directories.',
        (done) => {
        expect(fs.existsSync('cache/spiritrscandir.json')).toBe(false);
        rscandirHelpers.setCacheConfig(100, false, 1, 1);
        rscandir('spiritrscandirFiles');
        setTimeout(() => {
            expect(fs.existsSync('cache/spiritrscandir.json')).toBe(true);
            expect(rscandirHelpers.cacheFiles
                .hasOwnProperty('spiritrscandirFiles')).toBe(true);
            rscandirHelpers.cacheFiles = {};
            process.emit('SpiritRScandir Cleanup');
            rscandirHelpers.batchRead().then(() => {
                expect(rscandirHelpers.cacheFiles
                    .hasOwnProperty('spiritrscandirFiles'))
                    .toBe(true);
                done();
            });
        }, 100);
    });

    it('Should read from file cache when file caching is used.',
        (done) => {
        let modified;
        rscandirHelpers.setCacheConfig(100, false, 1, 1);
        expect(fs.existsSync('cache')).toBe(false);
        rscandir('spiritrscandirFiles');
        setTimeout(() => {
            expect(fs.existsSync('cache')).toBe(true);
            expect(fs.existsSync('cache/spiritrscandirFiles.json')).toBe(true);
            modified = (new Date(fs
                .lstatSync('cache/spiritrscandirFiles.json').mtime)).getTime();
            rscandir('spiritrscandirFiles');
            expect((new Date(fs
                .lstatSync('cache/spiritrscandirFiles.json').mtime)).getTime())
                .toBe(modified);
            setTimeout(() => {
                fs.writeFileSync('spiritrscandirFiles/test3.json',
                    '{"d": "e"}');
                rscandir('spiritrscandirFiles');
                setTimeout(() => {
                    expect((new Date(fs
                        .lstatSync('cache/spiritrscandirFiles.json').mtime))
                        .getTime())
                        .not.toBe(modified);
                    expect(rscandir('spiritrscandirFiles').length).toBe(4);
                    expect(rscandir('spiritrscandirFiles')[2])
                        .toBe('spiritrscandirFiles/test3.json');
                    done();
                }, 20);
            }, 200);
        }, 20);
    });

    it('Should clean all cache folders properly.',
        () => {
        rscandirHelpers.setCacheConfig(100, false, 1, 1);
        expect(fs.existsSync('cache')).toBe(false);
        rscandir('spiritrscandirFiles');
        expect(fs.existsSync('cache')).toBe(true);
        process.emit('SpiritRScandir Cleanup');
        expect(fs.existsSync('cache')).toBe(false);
        rscandir('spiritrscandirFiles');
        fs.writeFileSync('cache/test3.json', '{"d": "e"}');
        process.emit('SpiritRScandir Cleanup');
        expect(fs.existsSync('cache')).toBe(true);
    });
    
    it('Should allow just files to be filtered from results.', () => {
        let files;
        files = rscandirHelpers
            .walkSyncAndFilter('node_modules/' +
                'spiritrscandirFilesTestModule', '*/a*.json');
        expect(files.length).toBe(4);
        files = rscandirHelpers
            .walkSyncAndFilter('node_modules/' +
                'spiritrscandirFilesTestModule', 'a.json');
        expect(files.length).toBe(4);
    });

    it('Should allow just directories to be scanned.', () => {
        let directories;
        directories = rscandirHelpers
            .walkDirectoriesSync('node_modules/spiritrscandirFilesTestModule');
        expect(directories.length).toBe(7);
    });

    it('Should allow just directories to be scanned and filtered.', () => {
        let directories;
        directories = rscandirHelpers
            .walkDirectoriesSyncAndFilter('node_modules/' +
                'spiritrscandirFilesTestModule', '*nestedFolder*');
        expect(directories.length).toBe(5);
        
        directories = rscandirHelpers
            .walkDirectoriesSyncAndFilter('node_modules/' +
                'spiritrscandirFilesTestModule', 'node_modules');
        expect(directories.length).toBe(2);
    });

    it('Should do minimatch filtering', () => {
       expect(rscandir('node_modules/' +
            'spiritrscandirFilesTestModule', '*/*/*/*/a.json').length).toBe(1);
    });

    afterEach(() => {
        rimraf.sync('cache');
        rscandirHelpers.setCacheConfig();
        helpers.cleanupFiles();
        process.chdir(cwd);
    });
});