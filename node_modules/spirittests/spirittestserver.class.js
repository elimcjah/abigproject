/**
 * @class Test Server that is easily torn down, and comes with helper functions.
 */
class SpiritTestServer {
    constructor() {
        if (SpiritTestServer.instance) {
            return SpiritTestServer.instance;
        }
        SpiritTestServer.instance = this;
        this.app = require('express')();
        try {
            this.bots = require('spiritbots');
        } catch(e) {
            this.bots = null;
        }
        this.chalk = require('chalk');
        this.configs = require('spiritconfigs');
        this.express = require('express');
        this.fs = require('fs');
        this.hasSetup = false;
        this.http = require('http');
        this.https = require('https');
        this.request = require('request');
        this.rimraf = require('rimraf');
        this.routePaths = {};
        this.servers = [];
        this.spirittests = require('./spirittest.class.js');
    }


    /**
     * Creates the test server.
     * @param  {number} port (Optional) Port to listen on.
     * @return {Promise} A promise that resolves when the server is online.
     */
    createServer(port) {
        if (!this.hasSetup) {
            this.setupRoutes();
        }
        return new Promise((resolve, reject) => {
            (new Promise((res, rej) => {
                if (!port) {
                    port = 3000;
                    require('portscanner').findAPortNotInUse(port, Math.max(65535, port + 65536), 
                        '127.0.0.1', function(error, port) {
                        res(port);
                    });
                } else {
                    res(port);
                }
            })).then((port) => {
                this.servers.push(this.http.createServer(this.app.handle
                    .bind(this.app)).listen(port, () => {
                        console.log(this.chalk.yellow('Starting test server ' +
                            'on port ' + port));
                        resolve(port);
                    }
                ));
            });
        });
    }

    /**
     * Adds a route for each config entry provided.  Checks if the directory
     * exists first.
     */
    setupRoutes() {
        let folder, folders;
        if (!this.configs['tests'] || 
            !this.configs['tests']['server'] ||
            !this.configs['tests']['server']['paths']) {
            folders = [];
        } else {
            folders = this.configs['tests']['server']['paths'];
        }
        if (this.configs['tests'] && 
            this.configs['tests']['server'] &&
            this.configs['tests']['server']['requires']) {
            for (let module of this.configs['tests']['server']['requires']) {
                try {
                    require(require.resolve(module));
                } catch(e) {}
                try {
                    require(process.cwd() + '/' + 
                        module.replace(/\\/g, '/').split('/').slice(1)
                        .join('/'));
                } catch(e) {}
            }
        }
        if (this.fs.existsSync('./www')) {
            folders = ['./www'].concat(folders);
        }
        folders = folders.concat([__dirname + '/www']);
        process.emit('SpiritTests Setting Up Routes', this.app);
        for (folder of folders) {
            if (this.fs.existsSync(folder) && 
                this.fs.statSync(folder).isDirectory()) {
                this.app.use(this.express.static(folder));
            }
            if (this.fs.existsSync('./node_modules/' + folder) && 
                this.fs.statSync('./node_modules/' + folder).isDirectory()) {
                this.app.use(this.express.static('./node_modules/' + folder));
            }
        }
    }

    /**
     * Shuts down the servers.
     * @return {Promise} A promise that resolves when all the servers have
     *     shut down.
     */
    shutdownServers() {
        let closeCount = 0;
        return new Promise((resolve) => {
            if (this.servers.length == 0) {
                resolve();
            }
            for (let server of this.servers) {
                server.close(() => {
                    closeCount++;
                    if (closeCount >= this.servers.length) {
                        resolve();
                    }
                });
            }
        });
    }
}

module.exports = new SpiritTestServer();