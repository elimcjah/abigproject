/**
 * @module robots-signals scans for the signals directory and each file's export function
 * becomes a signal with the filename
 */


/**
 * @class
 */
var signals = function() {
    /** @type {Object} the chalk object  */
    this.chalk          = {};
    /** @type {Object} fs for the filesystem package */
    this.fs             = {};
    /** @type {Object} path for the path package */
    this.path           = {};

    /**
     * include relevant packages
     */
    this.requireExternalDependencies = function() {
        this.chalk          = require('chalk');
        this.fs             = require('fs');
        this.files          = require('spiritfiles');
        this.path           = require('path');
    };

    /**
     * reads the signals using a walksync
     * @param  {String} fromFolder (optional) a folder to scan for instead of "signals"
     */
    this.readSignals = function(fromFolder) {
        var files, i, path;

        if (typeof fromFolder == 'undefined')
            fromFolder  = 'signals';

        files   = this.files.readAllFiles(fromFolder);

        for (i in files) {
            if (typeof files[i] != 'string')
                continue;
            if (files[i].substr(-3) == '.js') {
                try {
                    signal  = files[i].split('/')[files[i].split('/').length - 1];
                    signal  = signal.substr(0, signal.length - '.js'.length);
                    robots = Robots = this.parent();
                    fn  = require(process.cwd() + '/' + files[i]);
                    if (typeof fn == 'function')
                        this.parent().registerIfNot(signal, fn);
                    else if (typeof fn == 'object') {
                        if (fn.desc)
                            fn.description = fn.desc;
                        if (!fn.description)
                            fn.description = '';
                        if (!fn.meta)
                            fn.meta = {};

                        if (fn.callback)
                            this.parent().registerIfNot(signal, fn.callback, fn.description, fn.meta);
                        if (fn.signal)
                            this.parent().registerIfNot(signal, fn.signal, fn.description, fn.meta);
                        if (fn.fn)
                            this.parent().registerIfNot(signal, fn.fn, fn.description, fn.meta);
                        if (fn.test)
                            this.parent().registerTestIfNot(signal, fn.test, fn.description);
                    }
                    else if (Array.isArray(fn)) {
                        this.parent().registerIfNot(signal, fn[0]);
                        this.parent().registerTest(signal, fn[1]);
                    }
                    else {
                        console.log(this.chalk.red('Error: ') + 'had trouble reading the signal ' + this.chalk.yellow(signal) + ' and no signal was registered', e);
                    }
                } catch(e) {
                    console.log(this.chalk.red('Error: ') + 'had trouble reading the signal ' + this.chalk.yellow(signal) + ' and no signal was registered', e);
                }
            }
        }
    };

    this.requireExternalDependencies();

    return this;
};

module.exports = signals;