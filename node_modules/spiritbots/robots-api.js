var settings = require('spiritconfigs').spiritbots;

/**
 * @class
 */
var RobotsAPI = (function() {
    /** @type {Object} the chalk object  */
    this.chalk          = {};
    /** @type {Object} the express object */
    this.express        = {};
    /** @type {Object} reference to the node http object */
    this.http           = {};
    /** @type {Object} reference to the portscanner library */
    this.portscanner    = {};
    /** @type {Object} reference to the server object */
    this.server         = {};
    /** @type {String} states discuss status of server */
    this.state          = 'closed';

    /**
     * include relevant packages
     */
    this.requireExternalDependencies = function() {
        this.chalk          = require('chalk');
        this.express        = require('express');
        this.http           = require('http');
        this.portscanner    = require('portscanner');
    };

    /**
     * the state of the api
     * @return {String} the state of the api
     */
    this.getState = function() {
        return this.state;
    }

    /**
     * set the state of the api
     * @param {String} newState to change to
     */
    this.setState = function(newState) {
        var oldState;
        switch (this.state) {
            case "open":
            case "closed":
            case "opening":
            break;
            default:
            console.warning(this.chalk.yellow('Spiritbots: unknown state entered'));
        }
        oldState = this.state;
        this.state = newState;
        this.parent().relay('robotsapi-state-change', newState, oldState);
        this.parent().relay('robotsapi-state-is-' + newState, oldState);
    }

    /**
     * include relevant packages
     */
    this.initializeExpress = function() {
        this.app    = this.express();
    }

    /**
     * loads all API endpoints
     */
    this.loadAPI = function() {
        var self    = this;
        this.app.all('/api/robots/hello', function(req,res,next){
            res.redirect('http://spiritway.co/ambassador-robots');
        });

        this.app.all('/api/robots/ping', function(req,res,next){
            res.send('pong');
        });

        this.app.all('/api/robots/checkin',function(req,res,next){
            var addr;

            if ( req.query.password != settings.password ) {
                console.log(chalk.red("Bad checkin attempt"));
                res.status(500).send("");
                return;
            }

            if (typeof req.headers.port != 'undefined')
                addr = req.connection.remoteAddress + ':' + req.headers.port;
            else
                addr = req.connection.remoteAddress;
            addr = Robots.answer('url-parts', addr);
            self.parent().http.registerNode(addr.host, req.query.settings, req.query.signals);
            var s   = JSON.parse(JSON.stringify(settings));
            res.status(200).send(s); // send back our settings, MINUS the password ^_^
        });

        this.app.all('/api/robots/checkout',function(req,res,next){
            addr    = self.parent().answer('get-ipv4-address',req.connection.remoteAddress);
            self.parent().http.unregisterNode(addr+":"+req.headers['port']);
            res.status(200).send("ok"); // send back our settings, MINUS the password ^_^
        });

        this.app.all('/api/robots/return',function(req,res,next){
            var addr, count, i, retArr, returningResults, valid;
            if (typeof req.headers.port != 'undefined')
                addr = req.connection.remoteAddress + ':' + req.headers.port;
            else
                addr = req.connection.remoteAddress;

            retArr = [];
            returningResults = false;
            valid = {};
            // should check that this IP is in the nodes network
            if ( !self.parent().answer('is-node-endpoint', addr) ) {
                next();
                return;
            }
            self.parent().relay('process-http-post', req, function(body){
                if ( typeof body.args == "undefined" )
                    var args    = [];
                else
                    var args    = JSON.parse(decodeURIComponent(body.args));

                i = 0;
                if (Array.isArray(self.parent().OnetimeCallbacks[body.signal])) {
                    for (i in self.parent().OnetimeCallbacks[body.signal]) {
                        if (self.parent().OnetimeCallbacks[body.signal][i]['meta']['returnBeacon']) {
                            returningResults = true;
                            valid[i] = true;
                        }
                        else
                            valid[i] = false;
                    }
                }
                count = i;
                if (Array.isArray(self.parent().Callbacks[body.signal])) {
                    for (i in self.parent().Callbacks[body.signal]) {
                        if (self.parent().Callbacks[body.signal][i]['meta']['returnBeacon']) {
                            returningResults = true;
                            valid[parseInt(count)+parseInt(i)] = true;
                        }
                        else
                            valid[parseInt(count)+parseInt(i)] = false;
                    }
                }
                results = self.parent().relay.apply(self.parent(), [body.signal].concat(args));
                for (i in valid)
                    if (valid[i])
                        retArr.push(results[i]);
                if (returningResults)
                    res.status(200).send(JSON.stringify(retArr));
                else
                    res.status(200).send("ok");
            })
        });

        this.app.all('/api/robots/signal',function(req,res,next){
            var addr;

            // should check that this IP is in the hubs network
            if (typeof req.headers.port != 'undefined')
                addr = req.connection.remoteAddress + ':' + req.headers.port;
            else
                addr = req.connection.remoteAddress;

            if ( !self.parent().answer('is-hub-endpoint', addr) ) {
                next();
                return;
            }
            var args    = JSON.parse(req.query.args);
            results = self.parent().relay.apply(self.parent(),[req.query.signal].concat(args));
            res.send(JSON.stringify(results));
        });
    }

    /**
     * opens a new api socket
     * @param  {Function} cb the callback to with the port
     */
    this.open   = function(cb) {
        if (typeof cb == 'undefined')
            cb = function() {};
        var self;
        self = this;

        if (self.getState() == 'open') {
            cb(self.port);
            return;
        }
        else if (self.getState() == 'opening') {
            self.parent().registerOnce('robotsapi-state-is-open', function() {cb(self.port);});
            return;
        }
        else
            self.setState.call(self, 'opening');

        // TODO add test for if the server is not open
        this.portscanner.findAPortNotInUse(settings['minPort'] || 3333, settings['maxPort'] || 3350, '127.0.0.1', function(error, port) {
            self.port   = port;
            self.loadAPI.apply(self);
            self.server = self.app.listen(self.port, function() {
                self.setState('open');
                cb(self.port);
            });
            console.log(self.chalk.red('AmbassadorRobots listening on port ' + self.port));
        });
    }

    /**
     * closees the open api
     * @param  {Function} cb the callback to with the port
     */
    this.close  = function(cb) {
        if (typeof cb == 'undefined')
            cb = function() {};
        this.server.close(cb);
    }

    this.requireExternalDependencies();

    return this;
});

module.exports = RobotsAPI;