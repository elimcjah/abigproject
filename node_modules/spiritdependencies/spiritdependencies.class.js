/**
 * @class SpiritDependencies
 * Object to manage dependencies such that NPM modules can be managed separately
 * and then merged into a single package.
 */
class SpiritDependencies {
    constructor() {
        if (!SpiritDependencies.instance) {
            SpiritDependencies.instance = this;
        } else {
            return SpiritDependencies.instance;
        }
        this.chalk = require('chalk');
        this.cheerio = require('cheerio');
        this.configs = require('spiritconfigs');
        this.configHelpers = require('spiritconfigs/spiritconfigs.class.js');
        this.configHelpers.setDefault('dependencies', {
            'modules_folder': 'modules'
        });
        this.files = require('spiritfiles');
        this.fs = require('fs');
        this.npmCheck = require('npm-check');
        this.request = require('request');
        this.rimraf = require('rimraf');
        this.status = {
            in: 0,
            out: 0
        };

        process.on('SpiritTests Setting Up Routes', 
            this.setupRoutes.bind(this));
    }

    /**
     * Move all files from selected modules to their equivalent local modules
     * folder.
     * @return {Promise} A promise that resolves when all modules have been
     * moved.
     */
    moveModules() {
        return new Promise((resolve, reject) => {
            let newModuleName;
            if (this.status.in > 0 || this.status.out > 0) {
                reject();
            }
            for (let module of this.configs['dependencies']['modules']) {
                if (typeof module == 'object') {
                    newModuleName = module[Object.keys(module)[0]];
                    module = Object.keys(module)[0];
                } else {
                    newModuleName = module;
                }
                if (!this.fs.existsSync('./node_modules/' + module)) {
                    if (this.fs.existsSync(this.configs['dependencies']['modules_folder'] + '/' + newModuleName)) {
                        this.symlinkModule(module, newModuleName);
                    }
                    continue;
                }
                try {
                    if (this.fs.lstatSync('./node_modules/' + module)
                        .isSymbolicLink()) {
                        continue;
                    }
                } catch(e) {}
                this.status.in++;
                console.info(this.chalk.cyan('SpiritDependencies info: ') + ' moving modules for', module,
                    '->', newModuleName);
                (function(module, newModuleName) {
                new Promise((resolve, reject) => {
                    if (!this.fs.existsSync('./node_modules/' + module)) {
                        resolve();
                    } else {
                        this.moveModule(module, newModuleName).then(resolve)
                            .catch(reject);
                    }
                }).then(() => {
                    this.movingModule = true;
                    console.info(this.chalk.cyan('SpiritDependencies info: ') + 'migrating node_modules ' +
                        ' for', module, '->', newModuleName);
                    this.moveNodeModules(module, newModuleName).then(() => {
                        console.info(this.chalk.cyan('SpiritDependencies info: ') + 'symlinking ' +
                            ' for', module, '->', newModuleName);
                        this.symlinkModule(module, newModuleName);
                        this.status.out++;
                        this.movingModule = false;
                        console.info(this.chalk.cyan('SpiritDependencies info: ') + 'finished moving ' +
                            'module', module, '->', newModuleName);
                        if (this.status.out >= this.status.in) {
                            this.status.in = 0;
                            this.status.out = 0;
                            resolve();
                        }
                    }).catch((e) => {
                        console.warn(this.chalk.red('SpiritDependencies warning: ') + ' an error ' + 
                            'occurred moving node_modules', e, module, 
                            newModuleName);
                        this.movingModule = false;
                        this.status.out++;
                    });;
                }).catch((e) => {
                    console.warn(this.chalk.red('SpiritDependencies warning: ') + 'an error occurred' + 
                        ' moving modules', e, module, newModuleName);
                    this.movingModule = false;
                    this.status.out++;
                });
                this.movingModule = true;
                }).bind(this)(module, newModuleName);
            }
            if (this.status.in == 0) {
                resolve();
            }
        });
    }

    /**
     * Moves individual module from the node_modules folder to the
     * newModuleName folder.
     * @return {Promise} A promise that resolves when a single module is moved.
     */
    moveModule(module, newModuleName) {
        if (this.movingModule) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    this.moveModule.apply(this, arguments).
                        then(resolve).
                        catch(reject);
                }, 1);
            });
        }
        if (this.fs.existsSync(this.configs['dependencies']['modules_folder'] + '/' + 
            newModuleName)) {
                this.rimraf.sync(this.configs['dependencies']
                    ['modules_folder'] + '/' + 
                    newModuleName);
            }
        return this.files.moveFiles('./node_modules/' + module, 
                this.configs['dependencies']['modules_folder'] + '/' + 
                    newModuleName, {
                    });
    }
    
    /**
     * Given a module, move its node_modules folder contents into the 
     * node_modules folder such that require('*') conflicts don't occur.
     * @return {Promise} A promise that resolves when node_modules inside a 
     * modules package have been moved back to node_modules.
     */
    moveNodeModules(module, newModuleName) {
        let files, foundModule;
        // if source node_modules has one of the modules folders, abort!
        if (this.fs.existsSync(this.configs['dependencies']
            ['modules_folder'] + '/' + newModuleName + '/node_modules')) {
            files = this.fs.readdirSync(this.configs['dependencies']
            ['modules_folder'] + '/' + newModuleName + '/node_modules');
            foundModule = files.find((function(file) {
                let module, newModuleName;
                for (module of this.configs['dependencies']['modules']) {
                    if (typeof module == 'object') {
                        newModuleName = module[Object.keys(module)[0]];
                        module = Object.keys(module)[0];
                    } else {
                        newModuleName = module;
                    }

                    if (file == module) {
                        this.rimraf.sync(this.configs['dependencies']
                            ['modules_folder'] + '/' + newModuleName + 
                            '/node_modules/' + file);
                        return true;
                    }
                }
                return false;
            }).bind(this));
            if (foundModule) {
                console.log('SpiritDependencies Error: one of your modules ' + 
                    'uses a different version of an existing module! ' +
                    'Please resolve this version conflict ASAP.  Using local' + 
                    ' version but this may cause malfunction!');
            }
        } else {
            return new Promise((resolve, reject) => {
                resolve(); // okay, we did nothing.
            });
        }
        return this.files.moveFiles(this.configs['dependencies']
            ['modules_folder'] + '/' + newModuleName + '/node_modules', 
            './node_modules');
    }

    /**
     * Setting up routes.
     */
    setupRoutes(app) {
        app.all('/spiritdependencies/check', function(req, res, next) {
            this.npmCheck().then((status) => {
                let $, idx, rin, rout, pkg, packages;
                packages = status.get('packages');
                rin = 0;
                rout = 0;
                for (idx in packages) {
                    pkg = packages[idx];
                    rin++;
                    (function(pkg) {
                        this.request('https://www.npmjs.com/package/' + 
                        pkg.moduleName, (err, response, body) => {
                            rout++;
                            $ = this.cheerio.load(body);
                            pkg.description = $('.package-description').text()
                                .trim();
                            pkg.downloads = $('.pretty-number.monthly' + 
                                '-downloads').text().trim();
                            pkg.issues = $('#issues').text()
                                .trim();
                            // https://api.github.com/repos/cheeriojs/cheerio/pulls?per_page=1
                            // https://api.github.com/repos/cheeriojs/cheerio/issues?per_page=1
                            pkg.pullRequests = $('#pull_requests').text()
                                .trim();
                            pkg.lastPublisher = $('.last-publisher a').text()
                                .trim();
                            pkg.lastPublisherImg = $('.last-publisher img')
                                .attr('src');
                            pkg.lastPublished = $('.last-publisher>span')
                                .text().trim();
                            if (rin == rout) {
                                res.send(packages);
                            }
                        });
                    }).bind(this)(pkg);
                }
            });
        }.bind(this));
    }

    /**
     * Symlinks a specified module in the node_modules folder to the 
     * configured modules folder and associated module folder.
     */
    symlinkModule(module, newModuleName) {
        this.fs.symlinkSync(process.cwd() + '/' + 
            this.configs['dependencies']['modules_folder'] + '/' + 
            newModuleName, './node_modules/' + module, 'dir');
    }

    /**
     * Unlinks module in node_modules *only if* it is a symlink.
     * @param {String} module A module name to unlink.
     */
    unlinkModule(module) {
        try {
            if (this.fs.lstatSync('./node_modules/' + module)
                        .isSymbolicLink()) {
                this.rimraf.sync('./node_modules/' + module);
            }
        } catch(e) {}
    }

    /**
     * For each module listed in the modules configuration, unlink the symlink
     * in the associated node_modules folder.  Useful for running npm update.
     */
    unlinkModules() {
        let newModuleName;
        for (let module of this.configs['dependencies']['modules']) {
            if (typeof module == 'object') {
                newModuleName = module[Object.keys(module)[0]];
                module = Object.keys(module)[0];
            } else {
                newModuleName = module;
            }
            this.unlinkModule(module);
        }
    }
}

module.exports = new SpiritDependencies();