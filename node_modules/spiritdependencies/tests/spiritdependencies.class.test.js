let fs;
let rimraf;
fs = require('fs');
rimraf = require('rimraf');
try {
    rimraf.sync('./node_modules/spiritdependenciesTestPackage');
} catch(e) {}
try {
    rimraf.sync('./node_modules/someOtherPackage');
} catch(e) {}
describe('SpiritDependencies', function() {
    let configs, files, fs, rimraf, spiritdependencies;
    beforeEach(function() {
        configs = require('spiritconfigs/spiritconfigs.class.js');
        if (!configs.overrides.hasOwnProperty('dependencies')) {
            configs.overrides['dependencies'] = {};
        }
        configs.overrides['dependencies']['modules_folder'] = 
            'testModulesFolder';
        configs.overrides['dependencies']['modules'] = [
            'spiritdependenciesTestPackage',
            {'someOtherPackage': 'alright'}
        ];
        files = require('spiritfiles');
        files.createLocalFile('', 'node_modules/' + 
            'spiritdependenciesTestPackage/package.json', '', '', true);
        files.createLocalFile('', 'node_modules/' + 
            'spiritdependenciesTestPackage/anotherFile.json', '', '', true);
        files.createLocalFile('', 'node_modules/' + 
            'spiritdependenciesTestPackage/index.js', '// default', '', true);
        files.createLocalFile('', 'node_modules/' + 
            'someOtherPackage/package.json', '', '', true);
        files.createFile('node_modules', 
            'someTestModuleDependency/index.js', 
            'global.includedTestModuleDependency = true;', 
            'spiritdependenciesTestPackage', true);
        fs = require('fs');
        rimraf = require('rimraf');
        spiritdependencies = require(__dirname + 
            '/../index.js');
            
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 30000;
    });

    it('Should, on post-install, move the configured node_modules to modules ' + 
        'and symlink the node_modules directory.', function(done) {
            expect(fs.existsSync('./testModulesFolder')).toBe(false);
            expect(fs.existsSync('./testModulesFolder/' +
                'spiritdependenciesTestPackage')).toBe(false);
            spiritdependencies.moveModules().then(() => {
                expect(fs.existsSync(process.cwd() + '/testModulesFolder'))
                    .toBe(true);
                expect(fs.existsSync(process.cwd() + '/testModulesFolder/' +
                    'spiritdependenciesTestPackage')).toBe(true);
                expect(fs.existsSync('./node_modules/' +
                    'spiritdependenciesTestPackage/package.json')).toBe(true);
                done();
            }).catch(() => {
            });
    });
        
    it('Should, on post-install, also move moved modules node_modules ' +
        'contents back to the regular node_modules folder.', function(done) {
            expect(fs.existsSync('./node_modules/someTestModuleDependency'))
                .toBe(false);
            expect(fs.existsSync('./node_modules/' +
                'spiritdependenciesTestPackage/node_modules/' +
                'someTestModuleDependency'))
                .toBe(true);
            spiritdependencies.moveModules().then(() => {
                expect(fs.existsSync('./node_modules/someTestModuleDependency'))
                    .toBe(true);
                done();
            }).catch(() => {
            });
    });

    it('Should allow a npm update or npm install to overwrite the ' +
        'node_modules folder.', function(done) {
        expect(fs.lstatSync('node_modules/' + 'spiritdependenciesTestPackage').
            isSymbolicLink()).toBe(false);
        spiritdependencies.moveModules().then(() => {
            expect(fs.lstatSync('node_modules/' + 
                'spiritdependenciesTestPackage').isSymbolicLink()).toBe(true);
            spiritdependencies.unlinkModules();
            expect(fs.existsSync('node_modules/' + 
                'spiritdependenciesTestPackage')).toBe(false);
            done();
        }).catch(() => {
        });
    });

    it('Should not attempt to move node_modules folders that match an ' + 
        'existing module.', function(done) {
        files.createFile('node_modules', 
            'spiritdependenciesTestPackage/index.js', 
            '', 
            'spiritdependenciesTestPackage', true);
        spiritdependencies.moveModules().then(() => {
            expect(fs.existsSync(process.cwd() + '/node_modules/' +
                'spiritdependenciesTestPackage/package.json')).toBe(true);
            done();
        }).catch(() => {
        });
    });

    it('Should allow multiple dependencies to be installed, and install ' +
        'should be blocking', function(done) {
        spiritdependencies.moveModules().then(() => {
            expect(fs.existsSync(process.cwd() + '/node_modules/' +
                'someOtherPackage/package.json')).toBe(true);
            expect(fs.existsSync(process.cwd() + '/testModulesFolder/' +
                'alright/package.json')).toBe(true);
            done();
        }).catch(() => {
        });
    });

    it('Should successfully install, even if no internal node_modules ' + 
        'folder exists.', function(done) {
        spiritdependencies.moveModules().then(() => {
            expect(fs.existsSync(process.cwd() + '/testModulesFolder/' +
                'alright/package.json')).toBe(true);
            done();
        }).catch(() => {
        });
    });

    it('Should preserve changes made to working copy files in the ' +
        'target modules folder', function(done) {
            configs.overrides['dependencies']['preserveChanges'] = true;
            require(__dirname + 
                '/../index.js').configs = 
                    configs.readConfigs();
            files.createLocalFile('', 'testModulesFolder/' + 
                'spiritdependenciesTestPackage/index.js', '', '', true);
            files.createLocalFile('', 'testModulesFolder/' + 
                'spiritdependenciesTestPackage/package.json', 
                '{"changed": true}', '', true);
            setTimeout(() => {
                files.fs.utimesSync('testModulesFolder/spiritdependenciesTestPackage/package.json',
                (new Date()), (new Date()));
                spiritdependencies.moveModules().then(() => {
                    expect(fs.readFileSync('testModulesFolder/' + 
                        'spiritdependenciesTestPackage/index.js', 'UTF8'))
                            .toBe('// default');
                    expect(fs.existsSync('testModulesFolder/' + 
                        'spiritdependenciesTestPackage/anotherFile.json'))
                            .toBe(true)
                    expect(fs.readFileSync('testModulesFolder/' + 
                        'spiritdependenciesTestPackage/package.json', 'UTF8'))
                            .toBe('{"changed": true}');
                    done();
                }).catch(() => {
                });
            }, 15000);
    });

    it('Should get the latest version of a package', (done) => {
        spiritdependencies.latestVersion('express').then((pkg) => {
            expect(pkg.latestVersion.split('.').length).toBe(3);
            done();
        });
    });

    it('Should check if a package is the latest version', (done) => {
        expect(spiritdependencies.packageExists('express'));
        expect(spiritdependencies.packageVersion('express').split('.').length)
            .toBe(3);
        let version = spiritdependencies.packageVersion('express');
        spiritdependencies.latestVersion('express').then((pkg) => {
            let version = pkg.latestVersion.split('.');
            version[2] = parseInt(version[2]) - 1;
            version = version.join('.');
            expect(spiritdependencies.compareVersions(pkg.latestVersion, 
                version)).toBe(1);
            version = pkg.latestVersion;
            expect(spiritdependencies.compareVersions(pkg.latestVersion, 
                version)).toBe(0);
            version = pkg.latestVersion.split('.');
            version[2] = parseInt(version[2]) + 1;
            version = version.join('.');
            expect(spiritdependencies.compareVersions(pkg.latestVersion, 
                version)).toBe(-1);
            spiritdependencies.isLatestVersion('express').then((result) => {
                let isLatest = spiritdependencies.compareVersions(
                    pkg.latestVersion,
                    spiritdependencies.packageVersion('express')
                );
                if (isLatest == 1) {
                    expect(result).toBe(false);
                } else {
                    expect(result).toBe(true);
                }
                done();
            });
        });
    });

    it('Should retrieve all module folders in their proper place.', () => {

    });

    it('Should retrieve all module package.json.', () => {

    });

    it('Should retrieve all module folders in their proper place.', () => {

    });

    it('Should run all installations on-demand for a given module.', () => {

    });

    it('Should get all JS files given a module name, ignoring node_modules.', 
        () => {

    });

    it('Should run scripts on-demand for a module.', () => {

    });

    afterEach(function() {
        rimraf.sync('./testModulesFolder');
        if (fs.existsSync('./node_modules/someTestModuleDependency')) {
            rimraf.sync('./node_modules/someTestModuleDependency');
        }
        try {
            rimraf.sync('./node_modules/spiritdependenciesTestPackage');
        } catch(e) {}
        try {
            rimraf.sync('./node_modules/someOtherPackage');
        } catch(e) {}
    });
});
