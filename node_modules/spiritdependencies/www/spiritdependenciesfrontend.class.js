class SpiritDependencies {
    constructor() {
        this.getStatus();
    }

    createModuleRow(dep) {
        let el, moduleName, status, statusColor;
        if (dep.devDependency) {
            el = $('.devDependencies .dependency.hidden').clone();
        } else {
            el = $('.dependencies .dependency.hidden').clone();
        }

        moduleName = `<a href="${dep.homepage}">${dep.moduleName}</a>`;

        status = dep.notInstalled ? 'Missing' : 'Installed';
        if (dep.notInstalled && dep.unused) {
            status += ' and ';
            statusColor = 'info';
        } else if (dep.unused) {
            status += ' but '
            statusColor = 'warning';
        }
        status = dep.unused ? 'Redundant/Unused' : '';
        if (dep.unused) {
            statusColor = 'danger';
        }
        
        $(el).removeClass('hidden');
        if (dep.devDependency) { 
            $('.devDependencies table tbody').append(el);
        } else {
            $('.dependencies table tbody').append(el);
        }
        if (parseInt(String("000" + dep.installed).slice(-3)
            .replace(/[\~\^\>\<\.]/g, '')) > 
            parseInt(String("000" + dep.latest).slice(-3)
            .replace(/[\~\^\>\<\.]/g, '')) && 
            statusColor != 'danger') {
                statusColor = 'warning'
            }
        $(el).get(0).outerHTML = Mustache.render($(el).get(0).outerHTML, {
            moduleName: dep.moduleName,
            moduleStatus: status,
            moduleVersion: dep.installed + '/' + dep.latest,
            statusColor: statusColor
        });
    }

    /**
     * Gets the current status of modules.
     */
    getStatus() {
        $.ajax({
            url: '/spiritdependencies/check',
            type: 'get',
            success: (arr) => {
                for (let module of arr) {
                    this.createModuleRow(module);
                }
            }
        })
    }
}