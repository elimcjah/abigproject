/**
 * @file
 * This file should install what is needed for the course and make periodic
 * updates to the course files.
 */

let fs = require('fs');
if (!fs.existsSync(__dirname + '/../../configs')) {
    fs.mkdirSync(__dirname + '/../../configs');
}
let files = require('spiritfiles');
process.chdir(__dirname + '/../../');
try {
    if (fs.existsSync(__dirname + '/../../configs/dependencies.json')) {
        fs.unlinkSync(__dirname + '/../../configs/dependencies.json');
    }
    files.createLocalFile('configs', 'dependencies.json', JSON.stringify({
        'modules': [
            {'js3030-week1': 'week1'},
            {'js3030-week2': 'week2'},
            {'js3030-week3': 'week3'}
        ],
        'preserveChanges': true
    }, null, 2));
} catch(e) {}
try {
    if (fs.existsSync(__dirname + '/../../configs/tests.json')) {
        fs.unlinkSync(__dirname + '/../../configs/tests.json');
    }
    files.createLocalFile('configs', 'tests.json', JSON.stringify({
        'folders': [
            'modules/week2/tests',
            'modules/week3/tests'
        ]
    }, null, 2));
} catch(e) {}
try {
    let pkg = JSON.parse(fs.readFileSync(__dirname + '/../../package.json'));
    pkg['dependencies']['spirittests'] = '^0.3.*';
    fs.writeFileSync(__dirname + '/../../package.json', JSON.stringify(pkg, 
        null, 2));
} catch(e) {}
try {
    /*
    if (process.env.HOME) {
        let extFiles = fs.readdirSync(__dirname + '/ext');
        for (let extFile of extFiles) {
            files.moveFiles(__dirname + '/ext/' + extFile, process.env.HOME + 
                '/.vscode/extensions/' + extFile, {overwrite: true});
        }
        files.moveFiles(__dirname + '/deployment/settings.json', 
            process.env.HOME + 
            '/Library/Application Support/Code/User/settings.json', 
            {overwrite: true});
    }
    */
} catch(e) {console.log('JS3030 Installation error: ', e);}