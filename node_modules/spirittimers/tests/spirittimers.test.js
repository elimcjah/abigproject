describe('SpiritTimers', () => {
    let spirittimers, spirittimersClass;
    beforeEach(function() {
        spirittimers = require(__dirname + '/../spirittimers.class.js');
        spirittimersClass = require(__dirname + '/../spirittimers.class.js').class;
    });

    it('Should be a singleton object.', () => {
        spirittimers.singletonTest = '123';
        expect((new spirittimersClass()).singletonTest).toBe('123');
    });
    
    it('Should parse time strings, returning a timestamp.', function() {
        let timeStamp, timeString;
        expect(spirittimersClass.parseTimestamp('1h')).toBe(1000 * 60 * 60);
        expect(spirittimersClass.parseTimestamp('45h')).toBe(1000 * 60 * 60 * 45);
        expect(spirittimersClass.parseTimestamp('y45h')).toBe(1000 * 60 * 60 * 45);
        expect(spirittimersClass.parseTimestamp('1h5m')).toBe(1000 * 60 * 60 +
            1000 * 60 * 5);
        timeStamp = (new Date()).getTime();
        timeString = spirittimersClass.toTimeString(new Date().getTime());
        expect(Math.abs(spirittimersClass.parseTimestamp(timeString) - timeStamp))
            .toBeLessThan(1000 * 60);
    });

    it('Should allow a timer to be added, and that timer should be staged on ' +
        'the appropriate interval check.', () => {
            expect(spirittimers.timers.hasOwnProperty('yearly')).toBe(false);
            expect(spirittimers.timers.hasOwnProperty('monthly'))
                .toBe(false);
            expect(spirittimers.timers.hasOwnProperty('weekly')).toBe(false);
            expect(spirittimers.timers.hasOwnProperty('daily')).toBe(false);
            expect(spirittimers.timers.hasOwnProperty('hourly')).toBe(false);
            expect(spirittimers.timers.hasOwnProperty('by the minute'))
                .toBe(false);
            expect(spirittimers.timers.hasOwnProperty('every second!'))
                .toBe(false);
            spirittimers.addTimer(() => {}, 2000 * 60 * 60 * 24 * 365);
            expect(spirittimers.timers.hasOwnProperty('yearly')).toBe(true);
            spirittimers.addTimer(() => {}, 2000 * 60 * 60 * 24 *
                (365 / 12));
            expect(spirittimers.timers.hasOwnProperty('monthly')).toBe(true);
            spirittimers.addTimer(() => {}, 2000 * 60 * 60 * 24 * 7);
            expect(spirittimers.timers.hasOwnProperty('weekly')).toBe(true);
            spirittimers.addTimer(() => {}, 2000 * 60 * 60 * 24);
            expect(spirittimers.timers.hasOwnProperty('daily')).toBe(true);
            spirittimers.addTimer(() => {}, 2000 * 60 * 60);
            expect(spirittimers.timers.hasOwnProperty('hourly')).toBe(true);
            spirittimers.addTimer(() => {}, 2000 * 60);
            expect(spirittimers.timers.hasOwnProperty('by the minute'))
                .toBe(true);
            spirittimers.addTimer(() => {}, 2000);
            expect(spirittimers.timers.hasOwnProperty('every second!'))
                .toBe(true);
        });

    it('Should read timers from the timer files.', (done) => {
        let timer;
        let obj = {
            'fn': () => {
            }
        };
        spyOn(obj, 'fn');
        global.spirittestsCallbackTestFn  = obj.fn;
        expect(spirittimers.timers.hasOwnProperty('every second!'))
            .toBe(false);
        timer = spirittimers.createTimerFile(() => {
            global.spirittestsCallbackTestFn();
        }, 1000, true);
        expect(spirittimers.timers.hasOwnProperty('every second!'))
            .toBe(true);
        spirittimers.removeTimer(timer);
        expect(spirittimers.timers.hasOwnProperty('every second!'))
            .toBe(false);
        spirittimersClass.readTimerFiles();
        expect(spirittimers.timers.hasOwnProperty('every second!'))
            .toBe(true);
        setTimeout(() => {
            expect(global.spirittestsCallbackTestFn).toHaveBeenCalled();
            done();
        }, 2000);
    });

    it('Should allow timers to be executed until a timestamp.', () => {

    });

    it('Should allow timers executed since timestamp to be queryable.', () => {

    });

    it('Should allow timers to be queryable by name.', () => {

    });

    it('Should allow timers to be queryable by tag.', () => {

    });

    it('Should allow timers to be queryable by proximity to execution time.', 
    () => {

    });

    afterEach(() => {
        spirittimers.removeAllTimers();
        process.emit('SpiritFiles Cleanup');
    });
});