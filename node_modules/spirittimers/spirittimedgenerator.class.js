
/**
 * Generator to be executed on a timed interval.  In addition to a function,
 * takes a stack as its input as "items" to be executed on each iteration.
 */
class SpiritTimedGenerator extends SpiritTimer {
    constructor(callbackFn, interval, iterationList) {
        /**
         * The current status of the timer.
         * @type {Number}
         */
        this.currentStatus = 0;
        /**
         * @type {Object} Keyed by status, arguments supplied to each
         *     callbackFn.
         */
        this.arguments = {};
        /**
         * @type {Object} Keyed by status, callbackFns if supplied are called
         * instead of the default function.
         */
        this.callbackFns = {};
    }

    /**
     * Adds an iteration to the  generator, a status for the iteration,
     * (optional) supplying arguments for the iteration, (optional) a function
     * for the iteration.
     */
    addIteration(status, args, callbackFn) {

    }

    /**
     * Gets or sets the cursor to identify the current iteration.
     * @param {string|number} index (Optional) If set, the place in which to
     *     set the cursor.
     */
    cursor(index) {

    }

    /**
     * Gets the currently executing status.
     */
    lastStatus() {

    }

    /**
     * Loads instructions to be used by the generator.
     * @param {Array<SpiritTimedIteration}
     * @param {Number} position (Optional) Position where the instructions
     *     should load.
     */
    load(iterations, position) {

    }

    /**
     * Performs the next result
     * @return {SpiritTimedIteration} An iteration next to be executed.
     */
    next() {

    }

    /**
     * Like the parent function, except also checks if items are in the stack.
     */
    shouldExecute() {

    }

    /**
     * Writes errors if any occurred.
     */
    writeError() {

    }

    /**
     * Writes the status for the current iteration.
     */
    writeStatus() {

    }
}