"use strict";

describe('SpiritFiles Class', function() {
    let cwd, files, fs, f, helpers, rscandir, rimraf;
    beforeEach(() => {
        cwd = process.cwd();
        process.chdir(__dirname + '/../');
        files = require(process.cwd() + '/index.js');
        fs = require('fs');
        helpers = require(__dirname + '/test.helpers.js');
        helpers.createFiles();
        rimraf = require('rimraf');
        rscandir = require('spiritrscandir');
    });

    it('Should read files from the specified directory using based on ' +
        'the current working directory.', () => {
        let arr, contents, i;
        f = files.readLocalFiles('spiritfilesFiles');
        arr = [];
        for (i in f) {
            expect(fs.existsSync(f[i])).toBe(true);
            arr.push(JSON.parse(fs.readFileSync(f[i])));
        }
        expect(arr[0]['a']).toBe('b');
    });

    it('Should read files from the specified directory in the ' +
        'current working directory and all node_modules packages.', () => {
        let arr, contents, i;
        f = files.readAllFiles('spiritfilesFiles');
        arr = [];
        for (i in f) {
            expect(fs.existsSync(f[i])).toBe(true);
            arr.push(JSON.parse(fs.readFileSync(f[i])));
        }
        expect(arr[0]['b']).toBe('e');
        expect(arr[1]['b']).toBe('d');
        expect(arr[2]['b']).toBe('123');
        expect(arr[5].hasOwnProperty('b')).toBe(false);
    });

    it('Should allow on demand file updates.', function(done) {
        let arr, contents, i;
        arr = [];
        f = files.readLocalFiles('spiritfilesFiles', (newFiles) => {
            arr = [];
            if (newFiles.length == 0) {
                done();
                return;
            }
            for (i in newFiles) {
                expect(fs.existsSync(newFiles[i])).toBe(true);
                arr.push(JSON.parse(fs.readFileSync(newFiles[i])));
            }
            expect(arr[0]['a']).toBe('b');
            expect(arr[2]['b']).toBe(123);
            done();
        }, 1000);
        for (i in f) {
            expect(fs.existsSync(f[i])).toBe(true);
            arr.push(JSON.parse(fs.readFileSync(f[i])));
        }
        expect(arr[0]['a']).toBe('b');
        setTimeout(() => {
            fs.writeFileSync('spiritfilesFiles/test3.json', '{"b": 123, "c": 234}');
        }, 500);
    });

    it('Should remove temporary files.', () => {
        files.createFile('temporary', 'a/b.json', '', null, true);
        expect(fs.existsSync('temporary/a/b.json')).toBe(true);
        process.emit('SpiritFiles Cleanup');
        expect(fs.existsSync('temporary')).toBe(false);
    });

    it('Should create package files.', () => {
        files.writeFile('node_modules/abc/a.txt', '');
        expect(fs.existsSync('node_modules/abc')).toBe(true);
        expect(fs.existsSync('node_modules/abc/temporary')).toBe(false);
        files.createPackageFile('temporary', 'a.json', '', 'abc');
        expect(fs.existsSync('node_modules/abc/temporary')).toBe(true);
        rimraf.sync('node_modules/abc');
    });

    it('Should allow files to be moved.', function(done) {
        expect(files.fs.existsSync('node_modules/spiritfilesFilesTestModule/' + 
            'spiritfilesFiles/btest.json')).toBe(false);
        files.moveFiles('node_modules/spiritfilesFilesTestModule/' + 
            'spiritfilesFiles/atest.json', 'node_modules/' + 
                'spiritfilesFilesTestModule/spiritfilesFiles/btest.json')
                .then(() => {
                    expect(files.fs.existsSync('node_modules/' + 
                        'spiritfilesFilesTestModule/' + 'spiritfilesFiles/' +
                        'btest.json')).toBe(true);
                            
                    expect(files.fs.existsSync('spiritfilesFiles/btest.json/'))
                        .toBe(false);
                    files.moveFiles('node_modules/spiritfilesFilesTestModule/' + 
                        'spiritfilesFiles', 'spiritfilesFiles').then(() => {
                            expect(files.fs.existsSync('spiritfilesFiles/' + 
                                'btest.json/'))
                                .toBe(true);
                                done();
                        }).catch((e) => {
                            console.log(e);
                        });
                });
        
            
    });

    afterEach(function() {
        helpers.cleanupFiles();
        process.chdir(cwd);
    });
});